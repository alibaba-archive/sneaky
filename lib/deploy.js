// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, after, archive, async, before, configs, deploy, exec, fs, getServers, jsYaml, localDir, logger, main, quit, readline, rsync, runCmd;

  async = require('async');

  readline = require('readline');

  fs = require('fs');

  jsYaml = require('js-yaml');

  Logger = require('./Logger');

  exec = require('child_process').exec;

  localDir = "" + process.env.HOME + "/.sneaky";

  configs = {};

  logger = null;

  quit = function() {
    return setTimeout(process.exit, 200);
  };

  deploy = function(project, callback) {
    logger.log('-----------------------------------------------------------------');
    logger.log("start deploy " + project.name);
    return async.waterfall([
      (function(next) {
        return archive(project, next);
      }), (function(next) {
        return before(project, next);
      }), (function(next) {
        return rsync(project, next);
      })
    ], function(err, result) {
      if (err != null) {
        logger.err(err.toString());
      }
      logger.log("finish deploy " + project.name);
      logger.log('-----------------------------------------------------------------');
      return callback(err, result);
    });
  };

  archive = function(project, callback) {
    var gitCmd, prefix;
    if (callback == null) {
      callback = function() {};
    }
    prefix = project.prefix || project.name + '/';
    gitCmd = ("git archive " + (project.version || 'HEAD') + " --prefix=" + prefix + " ") + ("--remote=" + project.source + " --format=tar | tar -xf - -C " + localDir);
    process.chdir("" + localDir + "/" + prefix);
    return runCmd(gitCmd, function(err, data) {
      return callback(err);
    });
  };

  rsync = function(project, callback) {
    var excludes, servers;
    if (callback == null) {
      callback = function() {};
    }
    servers = getServers(project);
    excludes = [];
    if (typeof project.excludes === 'object' && project.excludes.length > 0) {
      excludes = project.excludes.map(function(item) {
        return "--exclude=" + item;
      });
    }
    return async.eachSeries(servers, (function(server, next) {
      var rsyncCmd;
      rsyncCmd = project.rsyncCmd || "rsync -a --timeout=15 --delete-after --ignore-errors --force " + excludes.join(' ') + (" " + localDir + "/" + project.name + " " + server[0] + "@" + server[1] + ":" + project.destination);
      return runCmd(rsyncCmd, function(err, data) {
        return next(err);
      });
    }), function(err, result) {
      return callback(err);
    });
  };

  before = function(project, callback) {
    if (callback == null) {
      callback = function() {};
    }
    if ((project.before != null) && typeof project.before === 'string') {
      logger.log('before-hook:');
      return runCmd(project.before, function(err, data) {
        return callback(err);
      });
    } else {
      return callback(null);
    }
  };

  after = function(project, callback) {
    if (callback == null) {
      callback = function() {};
    }
  };

  getServers = function(project) {
    var i, item, server, servers, user, _ref, _ref1, _ref2;
    servers = [];
    if (typeof project.servers === 'string') {
      _ref = project.servers.split('|'), server = _ref[0], user = _ref[1];
      user = user || configs.user || 'root';
      servers.push([user, server]);
    } else if (typeof project.servers === 'object') {
      _ref1 = project.servers;
      for (i in _ref1) {
        item = _ref1[i];
        _ref2 = item.split('|'), server = _ref2[0], user = _ref2[1];
        user = user || configs.user || 'root';
        servers.push([user, server]);
      }
    } else if (configs.servers != null) {
      return getServers(configs);
    }
    return servers;
  };

  runCmd = function(cmd, callback) {
    if (callback == null) {
      callback = function() {};
    }
    logger.log(cmd);
    return exec(cmd, function(err, data) {
      logger.log(data.toString());
      return callback(err, data);
    });
  };

  ({
    autoTag: function() {}
  });

  main = function(options, callback) {
    var start;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = function() {};
    }
    logger = new Logger();
    logger.setPrefix({
      warn: 'WARN: ',
      err: 'ERR: '
    });
    start = new Date();
    logger.log('=================================================================');
    logger.log('start', start.toString());
    configs = (function() {
      var configPath, e;
      configPath = options.config || '~/.sneakyrc';
      configPath = logger.expandPath(configPath);
      try {
        return jsYaml.load(fs.readFileSync(configPath, 'utf-8'));
      } catch (_error) {
        e = _error;
        if (e != null) {
          switch (e.name) {
            case 'YAMLException':
              logger.err("please check your configure file's format");
              break;
            default:
              logger.err("missing sneakyrc file, did you put this file in path " + configPath + " ?");
          }
        }
        return quit();
      }
    })();
    while (!((configs.projects != null) && configs.projects.length > 0)) {
      logger.err('please define the project info in the `projects` collection');
    }
    return async.eachSeries(configs.projects, deploy, function(err, result) {
      var end;
      if (err != null) {
        logger.err(err.toString());
        quit();
      }
      end = new Date();
      logger.log('time cost:', end - start);
      logger.log('finish', end);
      logger.log('=================================================================\n');
      return callback(err, result);
    });
  };

  module.exports = main;

}).call(this);
