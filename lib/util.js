// Generated by CoffeeScript 1.8.0
(function() {
  var async, exec, fs, logger, path, projectPrefix, util, _;

  fs = require('fs');

  path = require('path');

  async = require('async');

  _ = require('underscore');

  logger = require('graceful-logger');

  exec = require('child_process').exec;

  projectPrefix = 'project:';

  util = {
    sep1: '=================================================================',
    sep2: '-----------------------------------------------------------------',
    execCmd: function(cmd, callback) {
      var child;
      if (callback == null) {
        callback = function() {};
      }
      logger.info("run command: " + cmd);
      child = exec(cmd, callback);
      child.stdout.pipe(process.stdout);
      return child.stderr.pipe(process.stderr);
    },
    expandPath: function(filePath) {
      var matches;
      if (matches = filePath.match(/^~(.*)/)) {
        return "" + process.env.HOME + matches[1];
      } else {
        return filePath;
      }
    },
    parseConfig: function(configs) {
      var config, dest, i, key, name, val, _dest, _ref, _ref1;
      for (name in configs) {
        config = configs[name];
        for (key in config) {
          val = config[key];
          if ((key === 'destinations' || key === 'excludes' || key === 'includes' || key === 'only') && toString.call(val) === '[object String]') {
            configs[name][key] = val.split(' ');
          }
          if (key === 'destinations') {
            _ref = configs[name][key];
            for (i in _ref) {
              dest = _ref[i];
              if (toString.call(dest) !== '[object String]') {
                continue;
              }
              _dest = {};
              if (dest.indexOf('@') === -1) {
                _dest.destination = dest;
              } else {
                _ref1 = dest.split(/[@:]/), _dest.user = _ref1[0], _dest.host = _ref1[1], _dest.destination = _ref1[2];
              }
              configs[name][key][i] = _dest;
            }
          }
        }
      }
      return configs;
    },
    getConfigPath: function(file) {
      var configPath, filePaths, i;
      configPath = file;
      if (configPath == null) {
        filePaths = [path.resolve('./.sneakyrc.json'), path.resolve('./.sneakyrc.js'), path.resolve('./.sneakyrc'), util.expandPath('~/.sneakyrc.json'), util.expandPath('~/.sneakyrc.js'), util.expandPath('~/.sneakyrc')];
        for (i in filePaths) {
          file = filePaths[i];
          if (fs.existsSync(file)) {
            configPath = file;
            break;
          }
        }
        configPath || (configPath = util.expandPath('~/.sneakyrc.json'));
      }
      return path.resolve(configPath);
    },
    loadConfig: function(file, callback) {
      var args;
      if (callback == null) {
        callback = function() {};
      }
      args = arguments;
      return async.waterfall([
        function(next) {
          var configPath, configs, e, _ref;
          configPath = util.getConfigPath(file);
          try {
            if ((_ref = path.extname(configPath)) === '.json' || _ref === '.js') {
              configs = require(configPath);
            } else {
              configs = JSON.parse(fs.readFileSync(configPath));
            }
          } catch (_error) {
            e = _error;
            configs = {};
          }
          return next(null, configs);
        }, function(configs, next) {
          var config, k;
          for (k in configs) {
            config = configs[k];
            config.name || (config.name = path.basename(process.cwd()) + ("-" + k));
          }
          return next(null, configs);
        }, function(configs, next) {
          return next(null, util.parseConfig(configs));
        }
      ], callback);
    },
    saveConfig: function(file, configs, callback) {
      var configPath;
      if (callback == null) {
        callback = function() {};
      }
      configPath = util.getConfigPath(file);
      return fs.writeFile(configPath, JSON.stringify(configs, null, 2), callback);
    }
  };

  module.exports = util;

}).call(this);
