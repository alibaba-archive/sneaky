// Generated by CoffeeScript 1.7.1
(function() {
  var async, execCmd, parse, parser;

  async = require('async');

  execCmd = require('../util').execCmd;

  parser = {
    excludes: function(project) {
      var excludes, _ref;
      if (!((_ref = project.excludes) != null ? _ref.length : void 0)) {
        return '';
      }
      excludes = project.excludes.map(function(item) {
        return "--exclude=" + item;
      });
      return excludes.join(' ');
    },
    includes: function(project) {
      var includes, _ref;
      if (!((_ref = project.includes) != null ? _ref.length : void 0)) {
        return '';
      }
      includes = project.includes.map(function(item) {
        return "--include=" + item;
      });
      return includes.join(' ');
    }
  };

  parse = function(project, options, i) {
    var cmd, destination, port, _ref, _ref1;
    destination = project.destinations[i];
    port = ((_ref = project.ports) != null ? _ref[i] : void 0) || 22;
    if ((_ref1 = project.only) != null ? _ref1.length : void 0) {
      project.excludes = ['*'];
      project.includes = project.only;
    }
    if (destination.indexOf('@') === -1) {
      cmd = "rsync -a --timeout=15 --delete-after --ignore-errors --force \\\n" + (parser.includes(project)) + " \\\n" + (parser.excludes(project)) + " \\\n" + options.chdir + "/" + project.name + "/ " + destination;
    } else {
      cmd = "rsync -a --timeout=15 --delete-after --ignore-errors --force \\\n-e \"ssh -p " + port + "\" \\\n" + (parser.includes(project)) + " \\\n" + (parser.excludes(project)) + " \\\n" + options.chdir + "/" + project.name + "/ " + destination;
    }
    return cmd;
  };

  module.exports = function(project, options, callback) {
    var count, _ref;
    if (callback == null) {
      callback = function() {};
    }
    count = (_ref = project.destinations) != null ? _ref.length : void 0;
    if (!count) {
      return callback(new Error("missing destinations in project: " + project.name));
    }
    return async.times(count, function(i, next) {
      var cmd;
      cmd = parse(project, options, i);
      return execCmd(cmd, next);
    }, callback);
  };

}).call(this);
