// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, Moment, colors, fs, mkdirp, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  colors = require('colors');

  fs = require('fs');

  mkdirp = require('mkdirp');

  Moment = require('moment');

  _ = require('underscore');

  Logger = (function() {
    function Logger(fileName, options) {
      var moment;
      if (options == null) {
        options = {};
      }
      this.serv = __bind(this.serv, this);
      this._log = __bind(this._log, this);
      moment = new Moment();
      this.logPath = "" + process.env.HOME + "/.sneaky/logs";
      this.logFile = fileName != null ? "" + this.logPath + "/" + (moment.format('YYYY-MM-DD')) + "." + fileName + ".log" : "" + this.logPath + "/" + (moment.format('YYYY-MM-DD')) + ".log";
      this.prefix = {
        log: 'info',
        err: 'ERR!',
        warn: 'WARN'
      };
      this.options = options;
      this.options.write = this.options.write || {
        flag: 'a'
      };
      this.options.read = this.options.read || {
        encoding: 'utf8'
      };
      this.instanceOptions = _.clone(this.options);
      mkdirp.sync(this.logPath);
    }

    Logger.prototype.setPrefix = function(prefix) {
      var string, type;
      for (type in prefix) {
        string = prefix[type];
        this.prefix[type] = string;
      }
      return this;
    };

    Logger.prototype.setOptions = function(options) {
      if (options['background']) {
        this.log("progress is now running in background, you can checkout the log in " + this.logFile);
      }
      this.options = _.extend(this.options, options);
      return this;
    };

    Logger.prototype.resetOptions = function() {
      this.options = _.clone(this.instanceOptions);
      return this;
    };

    Logger.expandPath = function(uPath) {
      var matches;
      if (matches = uPath.match(/^~(.*)/)) {
        return "" + process.env.HOME + matches[1];
      }
      return uPath;
    };

    Logger.prototype._log = function(str, prefix) {
      if (prefix == null) {
        prefix = '';
      }
      if (this.options['background']) {
        return this.background(str);
      }
      if (!this.options['quiet']) {
        console.log("" + prefix + str);
      }
      fs.writeFile(this.logFile, "" + str + "\n", this.options.write);
      return this;
    };

    Logger.prototype.background = function() {
      var i, v;
      fs.writeFile(this.logFile, "" + (((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments)).join(' ')) + "\n", {
        flag: 'a'
      });
      return this;
    };

    Logger.prototype.log = function() {
      var i, prefix, v;
      prefix = this.prefix['log'].length > 0 ? "" + this.prefix['log'].green + ": " : '';
      return this._log.apply(this, [
        "" + (((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')), prefix
      ]);
    };

    Logger.prototype.warn = function() {
      var i, prefix, v;
      prefix = this.prefix['warn'].length > 0 ? "" + this.prefix['warn'].yellow + ": " : '';
      return this._log.apply(this, [
        "" + (((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')), prefix
      ]);
    };

    Logger.prototype.err = function() {
      var i, prefix, v;
      prefix = this.prefix['err'].length > 0 ? "" + this.prefix['err'].red + ": " : '';
      return this._log.apply(this, [
        "" + (((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')), prefix
      ]);
    };

    Logger.prototype.readFile = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return fs.readFile(this.logFile, this.options.read, callback);
    };

    Logger.prototype.readFileSync = function() {
      var e;
      try {
        return fs.readFileSync(this.logFile, this.options.read);
      } catch (_error) {
        e = _error;
        this.err(e.toString());
        return null;
      }
    };

    Logger.prototype.serv = function(tokens, req, res) {
      var moment;
      moment = new Moment();
      this.log(("" + req.method + " " + req.url + " " + res.statusCode + " " + (new Date() - req._startTime) + " ") + ("" + (moment.format('YYYY-MM-DD HH:mm:ss'))));
      return null;
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
