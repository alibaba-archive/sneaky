// Generated by CoffeeScript 1.6.3
(function() {
  var Logger, Moment, colors, fs, mkdirp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  colors = require('colors');

  fs = require('fs');

  mkdirp = require('mkdirp');

  Moment = require('moment');

  Logger = (function() {
    function Logger(logFile, writeOptions, readOptions) {
      var moment;
      if (logFile == null) {
        logFile = null;
      }
      if (writeOptions == null) {
        writeOptions = null;
      }
      if (readOptions == null) {
        readOptions = null;
      }
      this._log = __bind(this._log, this);
      moment = new Moment();
      this.logPath = "" + process.env.HOME + "/.sneaky/logs";
      this.logFile = logFile || ("" + this.logPath + "/" + (moment.format('YYYY-MM-DD')) + ".log");
      this.writeOptions = writeOptions || {
        flag: 'a'
      };
      this.readOptions = readOptions || {
        encoding: 'utf8'
      };
      this.prefix = {
        log: '',
        err: '',
        warn: ''
      };
      mkdirp.sync(this.logPath);
    }

    Logger.prototype.setPrefix = function(prefix) {
      var string, type, _results;
      _results = [];
      for (type in prefix) {
        string = prefix[type];
        _results.push(this.prefix[type] = string);
      }
      return _results;
    };

    Logger.prototype.expandPath = function(uPath) {
      var matches;
      if (matches = uPath.match(/^~(.*)/)) {
        return "" + process.env.HOME + matches[1];
      }
      return uPath;
    };

    Logger.prototype._log = function(color, str) {
      console.log(str[color]);
      return fs.writeFile(this.logFile, "" + str + "\n", this.writeOptions);
    };

    Logger.prototype.background = function() {
      var i, v;
      this.log.log("progress is now running in background, you can checkout the log in " + logFile + ".mess");
      return fs.writeFile(this.logFile, "" + (((function() {
        var _results;
        _results = [];
        for (i in arguments) {
          v = arguments[i];
          _results.push(v);
        }
        return _results;
      }).apply(this, arguments)).join(' ')) + "\n", {
        flag: 'a'
      });
    };

    Logger.prototype.log = function() {
      var i, v;
      return this._log.apply(this, [
        'grey', ("" + this.prefix['log']) + ((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')
      ]);
    };

    Logger.prototype.warn = function() {
      var i, v;
      return this._log.apply(this, [
        'yellow', ("" + this.prefix['warn']) + ((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')
      ]);
    };

    Logger.prototype.err = function() {
      var i, v;
      return this._log.apply(this, [
        'red', ("" + this.prefix['err']) + ((function() {
          var _results;
          _results = [];
          for (i in arguments) {
            v = arguments[i];
            _results.push(v);
          }
          return _results;
        }).apply(this, arguments)).join(' ')
      ]);
    };

    Logger.prototype.readFile = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return fs.readFile(this.logFile, this.readOptions, callback);
    };

    Logger.prototype.readFileSync = function() {
      return fs.readFileSync(this.logFile, this.readOptions);
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
