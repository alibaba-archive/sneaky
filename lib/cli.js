// Generated by CoffeeScript 1.6.3
(function() {
  var cli, commander, config, deploy, pkg, _;

  commander = require('commander');

  _ = require('underscore');

  pkg = require('../package');

  deploy = require('./deploy');

  config = require('./config');

  cli = function() {
    var args, configAliasCommand, configCommand, deployAliasCommand, deployCommand, _configCommand, _deployCommand;
    commander.version(pkg.version).usage('<command> [options] [projects]');
    _deployCommand = function(cmd) {
      return cmd.usage('[options] [projects]').option('-c, --config <config>', 'user defined configure file').action(function() {
        var options, _options;
        options = _.last(arguments);
        _options = {
          projects: _.first(arguments, arguments.length - 1),
          config: options.config || null
        };
        return deploy(_options);
      });
    };
    deployCommand = commander.command('deploy').description('deploy local projects to servers');
    deployAliasCommand = commander.command('d').description('alias of deploy');
    _deployCommand(deployCommand);
    _deployCommand(deployAliasCommand);
    _configCommand = function(cmd) {
      cmd.command('show').description('show configure files');
      cmd.command('add').description('add configure');
      cmd.command('edit').description('edit configure');
      return cmd.option('-c, --config <config>', 'user defined configure file').action(function() {
        var action, options, _options;
        options = _.last(arguments);
        action = _.first(arguments);
        action = typeof action === 'string' ? action : null;
        _options = {
          action: action,
          configFile: options.config
        };
        return config(_options);
      });
    };
    configCommand = commander.command('config').description('add or update your configure file');
    configAliasCommand = commander.command('c').description('alias of config');
    _configCommand(configCommand);
    _configCommand(configAliasCommand);
    args = commander.parse(process.argv);
    if (process.argv.length < 3) {
      return commander.help();
    }
  };

  module.exports = cli;

}).call(this);
