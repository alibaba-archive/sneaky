// Generated by CoffeeScript 1.6.3
(function() {
  var async, exec, fs, ini, logger, path, projectPrefix, util, _;

  fs = require('fs');

  path = require('path');

  ini = require('ini');

  async = require('async');

  _ = require('underscore');

  logger = require('graceful-logger');

  exec = require('child_process').exec;

  projectPrefix = 'project:';

  util = {
    sep1: '=================================================================',
    sep2: '-----------------------------------------------------------------',
    execCmd: function(cmd, callback) {
      var child;
      if (callback == null) {
        callback = function() {};
      }
      logger.info("run command: " + cmd);
      child = exec(cmd, callback);
      child.stdout.on('data', function(data) {
        return process.stdout.write(data);
      });
      return child.stderr.on('data', function(data) {
        return process.stderr.write(data);
      });
    },
    expandPath: function(srcPath) {
      var matches;
      if (matches = srcPath.match(/^~(.*)/)) {
        return "" + process.env.HOME + matches[1];
      } else {
        return srcPath;
      }
    },
    expandToArray: function(str) {
      if (typeof str === 'string' && str.length > 0) {
        return str.split(',').map(function(r) {
          return r.trim();
        });
      }
      return [];
    },
    getConfigPath: function(file, callback) {
      var configFile,
        _this = this;
      if (callback == null) {
        callback = function() {};
      }
      if (file != null) {
        return callback(null, util.expandPath(file));
      } else {
        configFile = path.join(path.resolve('./.sneakyrc'));
        return fs.exists(configFile, function(exists) {
          if (exists) {
            return callback(null, configFile);
          } else {
            return callback(null, util.expandPath('~/.sneakyrc'));
          }
        });
      }
    },
    loadConfig: function(file, expand, callback) {
      var _this = this;
      if (expand == null) {
        expand = true;
      }
      if (callback == null) {
        callback = function() {};
      }
      if (typeof arguments[1] === 'function') {
        callback = arguments[1];
        expand = true;
      }
      return util.getConfigPath(file, function(err, configFile) {
        return fs.readFile(configFile, function(err, content) {
          var configs, k, kk, v, vv, _configs, _project;
          if (err != null) {
            return callback(err, content);
          }
          configs = ini.parse(content.toString());
          _configs = {};
          for (k in configs) {
            v = configs[k];
            if (k.indexOf(projectPrefix) === 0) {
              if (_configs.projects == null) {
                _configs.projects = {};
              }
              _project = v;
              for (kk in _project) {
                vv = _project[kk];
                switch (kk) {
                  case 'excludes':
                  case 'servers':
                  case 'destinations':
                  case 'ports':
                    _project[kk] = expand ? util.expandToArray(vv) : vv;
                }
              }
              _project.name = k.slice(projectPrefix.length).trim();
              _configs['projects'][_project.name] = _project;
              continue;
            }
            switch (k) {
              case 'excludes':
              case 'servers':
                _configs[k] = expand ? util.expandToArray(v) : v;
                break;
              default:
                _configs[k] = v;
            }
          }
          return callback(err, _configs);
        });
      });
    },
    saveConfig: function(file, configs, callback) {
      var _this = this;
      if (callback == null) {
        callback = function() {};
      }
      return util.getConfigPath(file, function(err, configFile) {
        var k, kk, project, v, _configs, _filterProp;
        _configs = {};
        _filterProp = function(prop, val) {
          switch (prop) {
            case 'excludes':
            case 'servers':
            case 'destinations':
            case 'ports':
              return val.join(',');
            default:
              return val;
          }
        };
        for (k in configs) {
          v = configs[k];
          if (k === 'projects') {
            if (v.template != null) {
              _configs["" + projectPrefix + " template"] = v.template;
              delete v.template;
            }
            for (kk in v) {
              project = v[kk];
              _configs["" + projectPrefix + " " + project.name] = project;
            }
          } else {
            _configs[k] = v;
          }
        }
        return fs.writeFile(configFile, ini.stringify(_configs), callback);
      });
    }
  };

  module.exports = util;

}).call(this);
