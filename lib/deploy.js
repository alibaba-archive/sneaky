// Generated by CoffeeScript 1.6.3
(function() {
  var async, deploy, fs, loadConfig, logger, mkdirp, sep1, sep2, steps, _, _ref;

  async = require('async');

  fs = require('graceful-fs');

  _ = require('underscore');

  mkdirp = require('mkdirp');

  logger = require('graceful-logger');

  _ref = require('./util'), loadConfig = _ref.loadConfig, sep1 = _ref.sep1, sep2 = _ref.sep2;

  steps = require('./steps');

  deploy = function(options) {
    var start, _options;
    _options = _.extend({
      chdir: "" + process.env.HOME + "/.sneaky",
      force: true,
      config: "" + process.env.HOME + "/.sneakyrc"
    }, options);
    start = new Date;
    logger.info("job start at " + start);
    return async.waterfall([
      function(next) {
        return fs.exists(_options.chdir, function(exists) {
          if (exists) {
            return next();
          } else {
            return mkdirp(_options.chdir, function(err) {
              return next(err);
            });
          }
        });
      }, function(next) {
        return loadConfig(_options.config, next);
      }, function(config, next) {
        var allProjects, i, k, name, runProjects, v, _ref1, _ref2;
        if (config == null) {
          return next(new Error("missing config file"));
        }
        if (_.isEmpty(config.projects)) {
          return next(new Error("no projects found in the configuration file"));
        }
        allProjects = config.projects;
        runProjects = [];
        if (((_ref1 = _options.projects) != null ? _ref1.length : void 0) > 0) {
          _ref2 = _options.projects;
          for (i in _ref2) {
            name = _ref2[i];
            if (allProjects[name] != null) {
              runProjects.push(allProjects[name]);
            } else {
              return next(new Error("can not find project: " + name));
            }
          }
        } else {
          runProjects = (function() {
            var _ref3, _results;
            _ref3 = config.projects;
            _results = [];
            for (k in _ref3) {
              v = _ref3[k];
              if (k !== 'template') {
                _results.push(v);
              }
            }
            return _results;
          })();
        }
        return next(null, runProjects);
      }, function(projects, next) {
        return async.eachSeries(projects, function(project, _next) {
          logger.info(sep2);
          logger.info("start deploy: " + project.name);
          return async.eachSeries(steps, function(step, __next) {
            return step(project, _options, __next);
          }, _next);
        }, next);
      }
    ], function(err) {
      var end;
      logger.info(sep1);
      if (err != null) {
        logger.err("" + err);
        return logger.err('deploy failed!');
      } else {
        end = new Date;
        logger.info('time cost:', (end - start) / 1000, " seconds");
        logger.info('deploy finished at', end);
        return logger.info('please checkout your remote directory');
      }
    });
  };

  module.exports = deploy;

}).call(this);
