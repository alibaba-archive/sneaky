// Generated by CoffeeScript 1.7.1
(function() {
  var Config, async, config, ini, loadConfig, logger, path, read, saveConfig, _, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  _ref = require('./util'), loadConfig = _ref.loadConfig, saveConfig = _ref.saveConfig;

  read = require('read');

  logger = require('graceful-logger');

  ini = require('ini');

  async = require('async');

  path = require('path');

  Config = (function() {
    function Config(options) {
      this.options = options;
      this.configFile = options.configFile;
    }

    Config.prototype._readConfigs = function(configFile, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return loadConfig(configFile, false, (function(_this) {
        return function(err, configs) {
          _this.configs = configs;
          return callback(err, configs);
        };
      })(this));
    };

    Config.prototype._stepSource = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._extendDefault('source', project, null, false, callback);
    };

    Config.prototype._stepVersion = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._extendDefault('version', project, 'HEAD', false, callback);
    };

    Config.prototype._stepDest = function(project, callback) {
      var destinations, k, options, projects, _project;
      if (callback == null) {
        callback = function() {};
      }
      destinations = project['destinations'] || null;
      if (destinations == null) {
        projects = this.configs.projects;
        if (projects != null) {
          for (k in projects) {
            _project = projects[k];
            if (_project.destinations != null) {
              destinations = path.join(path.dirname(_project.destinations.split(',')[0]), project.name);
              break;
            }
          }
        }
      }
      options = {
        prompt: "do you want specific destination for " + project.name + "?"
      };
      if (destinations) {
        options["default"] = destinations;
      }
      return read(options, function(err, destinations) {
        if (destinations != null) {
          project.destinations = destinations;
        }
        return callback(err);
      });
    };

    Config.prototype._stepExcludes = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._extendDefault('excludes', project, 'node_modules, .git', true, callback);
    };

    Config.prototype._stepBefore = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._extendDefault('before', project, null, false, callback);
    };

    Config.prototype._stepAfter = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._extendDefault('after', project, null, false, callback);
    };


    /*
     * @prop property name
     * @project project object
     * @defaultValue default value
     * @isExtend use extension
     * @callback callback
     */

    Config.prototype._extendDefault = function(prop, project, defaultValue, isExtend, callback) {
      var exDefault, k, options, projects, _project;
      if (defaultValue == null) {
        defaultValue = null;
      }
      if (isExtend == null) {
        isExtend = true;
      }
      if (callback == null) {
        callback = function() {};
      }
      exDefault = project[prop] || null;
      if (!((exDefault != null) || !isExtend)) {
        projects = this.configs.projects;
        if (projects != null) {
          for (k in projects) {
            _project = projects[k];
            if (_project[prop] != null) {
              exDefault = _project[prop];
              break;
            }
          }
        }
      }
      if (exDefault == null) {
        exDefault = defaultValue;
      }
      options = {
        prompt: "do you want specific " + prop + " for " + project.name + "?"
      };
      if (exDefault != null) {
        options["default"] = exDefault;
      }
      return read(options, function(err, result) {
        result = result || exDefault;
        if (result != null) {
          project[prop] = result;
        }
        return callback(err);
      });
    };

    Config.prototype._saveTemplate = function(project, callback) {
      var projects;
      if (callback == null) {
        callback = function() {};
      }
      projects = this.configs.projects;
      return read({
        prompt: 'save this project as template? Y/n',
        "default": 'y'
      }, (function(_this) {
        return function(err, result) {
          var template, _ref1;
          if ((_ref1 = result.toLowerCase()) === 'y' || _ref1 === 'yes') {
            template = _.clone(project);
            template.name = 'template';
            _this.configs.projects['template'] = template;
            return saveConfig(_this.configFile, _this.configs, function(err) {
              if (err != null) {
                logger.err(err);
              } else {
                logger.info('template saved');
              }
              return callback(err);
            });
          }
        };
      })(this));
    };

    Config.prototype._saveProject = function(project, callback) {
      if (callback == null) {
        callback = function() {};
      }
      console.log(project);
      this.configs['projects'][project.name] = project;
      return read({
        prompt: 'look nice? Y/n',
        "default": 'y'
      }, (function(_this) {
        return function(err, nice) {
          if (nice.toLowerCase() === 'y' || nice.toLowerCase() === 'yes') {
            return saveConfig(_this.configFile, _this.configs, function(err) {
              if (err != null) {
                logger.err(err);
                return callback(err);
              } else {
                logger.info('configure saved');
                return _this._saveTemplate(project, callback);
              }
            });
          } else {
            return callback(err);
          }
        };
      })(this));
    };

    Config.prototype.run = function() {
      var action;
      action = this.options.action;
      return this._readConfigs(this.configFile, (function(_this) {
        return function(err, configs) {
          _this.configs = configs;
          if ((action != null) && action.indexOf('_') !== 0 && typeof _this[action] === 'function') {
            return _this[action]();
          } else {
            return _this.interactive();
          }
        };
      })(this));
    };

    Config.prototype.show = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (this.configs) {
        return console.log(JSON.stringify(this.configs, null, 2));
      } else {
        return logger.warn('missing configure file');
      }
    };

    Config.prototype["delete"] = function(callback) {
      var err, projectNames, projects, _ref1;
      if (callback == null) {
        callback = function() {};
      }
      projects = (_ref1 = this.configs) != null ? _ref1.projects : void 0;
      if (_.isEmpty(projects)) {
        err = 'no projects in configure file';
        logger.err(err);
        return callback(err);
      }
      projectNames = _.keys(projects);
      if (__indexOf.call(projectNames, 'template') >= 0) {
        projectNames.splice(projectNames.indexOf('template'), 1);
      }
      return read({
        prompt: "which one do you want to delete? " + (projectNames.join('/'))
      }, (function(_this) {
        return function(err, projectName) {
          if (!((projectName != null) && (projects[projectName] != null))) {
            err = 'please chose a project!';
            logger.err(err);
            return callback(err);
          }
          delete _this.configs['projects'][projectName];
          return saveConfig(_this.configFile, _this.configs, function(err) {
            if (err) {
              logger.err(err);
            } else {
              logger.info('project deleted');
            }
            return callback(err);
          });
        };
      })(this));
    };

    Config.prototype.edit = function(callback) {
      var err, projectNames, projects, _ref1;
      if (callback == null) {
        callback = function() {};
      }
      projects = (_ref1 = this.configs) != null ? _ref1.projects : void 0;
      if (_.isEmpty(projects)) {
        err = 'no projects in configure file';
        logger.err(err);
        return callback(err);
      }
      projectNames = _.keys(projects);
      if (__indexOf.call(projectNames, 'template') >= 0) {
        projectNames.splice(projectNames.indexOf('template'), 1);
      }
      return read({
        prompt: "which one do you want to edit? " + (projectNames.join('/'))
      }, (function(_this) {
        return function(err, projectName) {
          var project;
          if (!((projectName != null) && (projects[projectName] != null))) {
            err = 'please chose a project!';
            logger.err(err);
            return callback(err);
          }
          project = projects[projectName];
          return async.eachSeries(['_stepSource', '_stepVersion', '_stepDest', '_stepExcludes', '_stepBefore', '_stepAfter'], (function(func, next) {
            return _this[func](project, next);
          }), function(err) {
            if (err != null) {
              logger.err(err);
              return callback(err);
            }
            return _this._saveProject(project, callback);
          });
        };
      })(this));
    };

    Config.prototype.add = function(callback) {
      var projects;
      if (callback == null) {
        callback = function() {};
      }
      if (!this.configs) {
        this.configs = {};
      }
      if (this.configs.projects == null) {
        this.configs.projects = {};
      }
      projects = this.configs.projects;
      return read({
        prompt: 'please enter your project name:'
      }, (function(_this) {
        return function(err, projectName) {
          var project;
          if (projectName == null) {
            err = 'missing project name!';
          } else if (projects[projectName] != null) {
            err = "project " + projectName + " is exist!";
          }
          if (err != null) {
            logger.err(err);
            return callback(err);
          }
          project = {
            name: projectName
          };
          return async.eachSeries(['_stepSource', '_stepVersion', '_stepDest', '_stepExcludes', '_stepBefore', '_stepAfter'], (function(func, next) {
            return _this[func](project, next);
          }), function(err) {
            if (err != null) {
              logger.err(err);
              return callback(err);
            }
            return _this._saveProject(project, callback);
          });
        };
      })(this));
    };

    Config.prototype.interactive = function(callback) {
      var actionAlias, _interactive;
      if (callback == null) {
        callback = function() {};
      }
      actionAlias = {
        's': 'show',
        'e': 'edit',
        'a': 'add',
        'd': 'delete'
      };
      _interactive = (function(_this) {
        return function() {
          return read({
            prompt: "which action do you need? Show/edit/add/delete",
            "default": 'show'
          }, function(err, action, isDefault) {
            action = action.toLowerCase();
            if (actionAlias[action] != null) {
              action = actionAlias[action];
            }
            if (typeof _this[action] === 'function' && action.indexOf('_') !== 0) {
              return _this[action](function(err) {
                if (err == null) {
                  return callback();
                }
                return read({
                  prompt: "ouch! something bad happened, do you want to continue? y/N",
                  "default": 'n'
                }, function(err, chose) {
                  if (chose.toLowerCase() === 'y') {
                    return _interactive();
                  } else {
                    return callback(err);
                  }
                });
              });
            } else {
              return logger.err("can not find action [" + action + "]");
            }
          });
        };
      })(this);
      return _interactive();
    };

    return Config;

  })();

  config = function(options) {
    var $config;
    $config = new Config(options);
    return $config.run();
  };

  module.exports = config;

}).call(this);
