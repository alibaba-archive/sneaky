// Generated by CoffeeScript 1.7.1
(function() {
  var async, exec, fs, ini, logger, path, projectPrefix, util, _;

  fs = require('fs');

  path = require('path');

  ini = require('ini');

  async = require('async');

  _ = require('underscore');

  logger = require('graceful-logger');

  exec = require('child_process').exec;

  projectPrefix = 'project:';

  util = {
    sep1: '=================================================================',
    sep2: '-----------------------------------------------------------------',
    execCmd: function(cmd, callback) {
      var child;
      if (callback == null) {
        callback = function() {};
      }
      logger.info("run command: " + cmd);
      child = exec(cmd, callback);
      child.stdout.on('data', function(data) {
        return process.stdout.write(data);
      });
      return child.stderr.on('data', function(data) {
        return process.stderr.write(data);
      });
    },
    expandPath: function(srcPath) {
      var matches;
      if (matches = srcPath.match(/^~(.*)/)) {
        return "" + process.env.HOME + matches[1];
      } else {
        return srcPath;
      }
    },
    expandToArray: function(str) {
      if (typeof str === 'string' && str.length > 0) {
        return str.split(',').map(function(r) {
          return r.trim();
        });
      }
      return [];
    },
    getConfigPath: function(file, callback) {
      var configFile;
      if (callback == null) {
        callback = function() {};
      }
      if (file != null) {
        return callback(null, util.expandPath(file));
      } else {
        configFile = path.join(path.resolve('./.sneakyrc'));
        return fs.exists(configFile, (function(_this) {
          return function(exists) {
            if (exists) {
              return callback(null, configFile);
            } else {
              return callback(null, util.expandPath('~/.sneakyrc'));
            }
          };
        })(this));
      }
    },
    loadConfig: function(file, callback) {
      var args;
      if (callback == null) {
        callback = function() {};
      }
      args = arguments;
      return async.waterfall([
        function(next) {
          return util.getConfigPath(file, next);
        }, function(file, next) {
          return fs.readFile(file, next);
        }, function(content, next) {
          var configs, e;
          try {
            configs = JSON.parse(content);
            return next(null, configs);
          } catch (_error) {
            e = _error;
            logger.warn("" + file + " is not a valid json file\nini-format configure file is deprecated\nand will be removed in the next version.");
            return util._loadConfigFromIni(file, true, function(err, configs) {
              return next(err, (configs != null ? configs.projects : void 0) || {});
            });
          }
        }, function(configs, next) {
          var config, k;
          for (k in configs) {
            config = configs[k];
            config.name || (config.name = path.basename(process.cwd()) + ("-" + k));
          }
          return next(null, configs);
        }
      ], callback);
    },
    initojson: function(file, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return this._loadConfigFromIni(file, true, function(err, configs) {
        var config, k;
        configs = configs.projects;
        for (k in configs) {
          config = configs[k];
          if (config.name) {
            delete config.name;
          }
        }
        return fs.writeFile(file, JSON.stringify(configs, null, 2), callback);
      });
    },
    _loadConfigFromIni: function(file, expand, callback) {
      if (expand == null) {
        expand = true;
      }
      if (callback == null) {
        callback = function() {};
      }
      if (typeof arguments[1] === 'function') {
        callback = arguments[1];
        expand = true;
      }
      return util.getConfigPath(file, (function(_this) {
        return function(err, configFile) {
          return fs.readFile(configFile, function(err, content) {
            var configs, k, kk, v, vv, _configs, _project;
            if (err != null) {
              return callback(err, content);
            }
            configs = ini.parse(content.toString());
            _configs = {};
            for (k in configs) {
              v = configs[k];
              if (k.indexOf(projectPrefix) === 0) {
                if (_configs.projects == null) {
                  _configs.projects = {};
                }
                _project = v;
                for (kk in _project) {
                  vv = _project[kk];
                  switch (kk) {
                    case 'excludes':
                    case 'servers':
                    case 'destinations':
                    case 'ports':
                      _project[kk] = expand ? util.expandToArray(vv) : vv;
                  }
                }
                _project.name = k.slice(projectPrefix.length).trim();
                _configs['projects'][_project.name] = _project;
                continue;
              }
              switch (k) {
                case 'excludes':
                case 'servers':
                  _configs[k] = expand ? util.expandToArray(v) : v;
                  break;
                default:
                  _configs[k] = v;
              }
            }
            return callback(err, _configs);
          });
        };
      })(this));
    },
    saveConfig: function(file, configs, callback) {
      if (callback == null) {
        callback = function() {};
      }
      return util.getConfigPath(file, function(err, configFile) {
        return fs.writeFile(configFile, JSON.stringify(configs, null, 2), callback);
      });
    }
  };

  module.exports = util;

}).call(this);
